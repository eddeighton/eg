// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef W__WORKSPACE_EG_SRC_SCHEMA_SCHEMA_SIMPL_HXX
#define W__WORKSPACE_EG_SRC_SCHEMA_SCHEMA_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define W__WORKSPACE_EG_SRC_SCHEMA_SCHEMA_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "schema-sskel.hxx"

#include <xsde/cxx/stack.hxx>

class name_simpl: public name_sskel
{
  public:
  name_simpl ();

  virtual void
  pre (const ::name&);

  public:
  ::xml_schema::string_simpl base_impl_;
};

class Config_simpl: public Config_sskel
{
  public:
  virtual void
  pre (const ::Config&);

  // Elements.
  //
  virtual const ::name&
  name ();

  virtual bool
  file ();

  public:
  struct Config_simpl_state
  {
    const ::Config* Config_;
  };

  Config_simpl_state Config_simpl_state_;
};

class eg_simpl: public eg_sskel
{
  public:
  virtual void
  pre (const ::eg&);

  // Elements.
  //
  virtual ::std::string
  host ();

  virtual ::std::string
  folder ();

  virtual bool
  stuff_next ();

  virtual const ::Config&
  stuff ();

  public:
  struct eg_simpl_state
  {
    const ::eg* eg_;
    ::eg::stuff_const_iterator stuff_;
    ::eg::stuff_const_iterator stuff_end_;
  };

  eg_simpl_state eg_simpl_state_;
};

#ifdef W__WORKSPACE_EG_SRC_SCHEMA_SCHEMA_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

// Serializer aggregate for the eg element.
//
class eg_saggr
{
  public:
  eg_saggr ();

  void
  pre (const ::eg& x)
  {
    this->eg_s_.pre (x);
  }

  void
  post ()
  {
    this->eg_s_.post ();
  }

  ::eg_simpl&
  root_serializer ()
  {
    return this->eg_s_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->eg_s_._reset ();
  }

  public:
  ::Config_simpl Config_s_;
  ::name_simpl name_s_;
  ::eg_simpl eg_s_;
  ::xml_schema::boolean_simpl boolean_s_;
  ::xml_schema::string_simpl string_s_;
};

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // W__WORKSPACE_EG_SRC_SCHEMA_SCHEMA_SIMPL_HXX
