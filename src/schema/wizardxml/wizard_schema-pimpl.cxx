// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "wizard_schema-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

namespace wizardxml
{
  // Wizard_pimpl
  //

  Wizard_pimpl::
  Wizard_pimpl (bool b)
  {
    this->Wizard_pimpl_base_ = b;
    this->Wizard_pimpl_state_.Wizard_ = 0;
  }

  Wizard_pimpl::
  ~Wizard_pimpl ()
  {
    if (!this->Wizard_pimpl_base_ && this->Wizard_pimpl_state_.Wizard_)
      delete this->Wizard_pimpl_state_.Wizard_;
  }

  void Wizard_pimpl::
  _reset ()
  {
    Wizard_pskel::_reset ();

    if (!this->Wizard_pimpl_base_ && this->Wizard_pimpl_state_.Wizard_)
    {
      delete this->Wizard_pimpl_state_.Wizard_;
      this->Wizard_pimpl_state_.Wizard_ = 0;
    }
  }

  void Wizard_pimpl::
  pre_impl (::wizardxml::Wizard* x)
  {
    this->Wizard_pimpl_state_.Wizard_ = x;
  }

  void Wizard_pimpl::
  pre ()
  {
    ::wizardxml::Wizard* x = new ::wizardxml::Wizard;
    this->pre_impl (x);
  }

  void Wizard_pimpl::
  Project (const ::std::string& x)
  {
    this->Wizard_pimpl_state_.Wizard_->Project ().push_back (x);
  }

  ::wizardxml::Wizard* Wizard_pimpl::
  post_Wizard ()
  {
    ::wizardxml::Wizard* r = this->Wizard_pimpl_state_.Wizard_;
    this->Wizard_pimpl_state_.Wizard_ = 0;
    return r;
  }
}

namespace wizardxml
{
  // Wizard_paggr
  //

  Wizard_paggr::
  Wizard_paggr ()
  {
    this->Wizard_p_.parsers (this->string_p_);
  }

  const char* Wizard_paggr::
  root_name ()
  {
    return "Wizard";
  }

  const char* Wizard_paggr::
  root_namespace ()
  {
    return "";
  }
}

// Begin epilogue.
//
//
// End epilogue.

