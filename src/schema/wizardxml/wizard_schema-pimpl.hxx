// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef W__ROOT_EG_SRC_SRC_SCHEMA_WIZARD_SCHEMA_PIMPL_HXX
#define W__ROOT_EG_SRC_SRC_SCHEMA_WIZARD_SCHEMA_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define W__ROOT_EG_SRC_SRC_SCHEMA_WIZARD_SCHEMA_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "wizard_schema-pskel.hxx"

#include <xsde/cxx/stack.hxx>

namespace wizardxml
{
  class Wizard_pimpl: public Wizard_pskel
  {
    public:
    Wizard_pimpl (bool = false);

    ~Wizard_pimpl ();

    virtual void
    _reset ();

    virtual void
    pre ();

    // Elements.
    //
    virtual void
    Project (const ::std::string&);

    virtual ::wizardxml::Wizard*
    post_Wizard ();

    public:
    void
    pre_impl (::wizardxml::Wizard*);

    public:
    struct Wizard_pimpl_state
    {
      ::wizardxml::Wizard* Wizard_;
    };

    Wizard_pimpl_state Wizard_pimpl_state_;
    bool Wizard_pimpl_base_;
  };
}

#ifdef W__ROOT_EG_SRC_SRC_SCHEMA_WIZARD_SCHEMA_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

namespace wizardxml
{
  // Parser aggregate for the Wizard element.
  //
  class Wizard_paggr
  {
    public:
    Wizard_paggr ();

    void
    pre ()
    {
      this->Wizard_p_.pre ();
    }

    ::wizardxml::Wizard*
    post ()
    {
      return this->Wizard_p_.post_Wizard ();
    }

    ::wizardxml::Wizard_pimpl&
    root_parser ()
    {
      return this->Wizard_p_;
    }

    static const char*
    root_name ();

    static const char*
    root_namespace ();

    void
    reset ()
    {
      this->Wizard_p_._reset ();
    }

    public:
    ::xml_schema::string_pimpl string_p_;
    ::wizardxml::Wizard_pimpl Wizard_p_;
  };
}

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // W__ROOT_EG_SRC_SRC_SCHEMA_WIZARD_SCHEMA_PIMPL_HXX
