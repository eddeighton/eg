// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "installation_schema-sskel.hxx"

namespace installationxml
{
  // Installation_sskel
  //

  void Installation_sskel::
  Version_serializer (::xml_schema::string_sskel& s)
  {
    this->Version_serializer_ = &s;
  }

  void Installation_sskel::
  Python_serializer (::xml_schema::string_sskel& s)
  {
    this->Python_serializer_ = &s;
  }

  void Installation_sskel::
  Toolchain_serializer (::xml_schema::string_sskel& s)
  {
    this->Toolchain_serializer_ = &s;
  }

  void Installation_sskel::
  SDK_serializer (::xml_schema::string_sskel& s)
  {
    this->SDK_serializer_ = &s;
  }

  void Installation_sskel::
  serializers (::xml_schema::string_sskel& Version,
               ::xml_schema::string_sskel& Python,
               ::xml_schema::string_sskel& Toolchain,
               ::xml_schema::string_sskel& SDK)
  {
    this->Version_serializer_ = &Version;
    this->Python_serializer_ = &Python;
    this->Toolchain_serializer_ = &Toolchain;
    this->SDK_serializer_ = &SDK;
  }

  Installation_sskel::
  Installation_sskel ()
  : Installation_impl_ (0),
    Version_serializer_ (0),
    Python_serializer_ (0),
    Toolchain_serializer_ (0),
    SDK_serializer_ (0)
  {
  }

  Installation_sskel::
  Installation_sskel (Installation_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Installation_impl_ (impl),
    Version_serializer_ (0),
    Python_serializer_ (0),
    Toolchain_serializer_ (0),
    SDK_serializer_ (0)
  {
  }
}

#include <assert.h>

namespace installationxml
{
  // Installation_sskel
  //

  void Installation_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Version_serializer_)
      this->Version_serializer_->_reset ();

    if (this->Python_serializer_)
      this->Python_serializer_->_reset ();

    if (this->Toolchain_serializer_)
      this->Toolchain_serializer_->_reset ();

    if (this->SDK_serializer_)
      this->SDK_serializer_->_reset ();

    this->resetting_ = false;
  }
}

namespace installationxml
{
  // Element validation and serialization for Installation_sskel.
  //
  void Installation_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Version
    //
    {
      const ::std::string& r = this->Version ();

      if (this->Version_serializer_)
      {
        this->Version_serializer_->pre (r);
        this->_start_element ("Version");
        this->Version_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Version_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Version_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Version_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Version_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // Python
    //
    {
      const ::std::string& r = this->Python ();

      if (this->Python_serializer_)
      {
        this->Python_serializer_->pre (r);
        this->_start_element ("Python");
        this->Python_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Python_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Python_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Python_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Python_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // Toolchain
    //
    {
      const ::std::string& r = this->Toolchain ();

      if (this->Toolchain_serializer_)
      {
        this->Toolchain_serializer_->pre (r);
        this->_start_element ("Toolchain");
        this->Toolchain_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Toolchain_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Toolchain_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Toolchain_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Toolchain_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // SDK
    //
    {
      const ::std::string& r = this->SDK ();

      if (this->SDK_serializer_)
      {
        this->SDK_serializer_->pre (r);
        this->_start_element ("SDK");
        this->SDK_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->SDK_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->SDK_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->SDK_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->SDK_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }
  }
}

namespace installationxml
{
}

// Begin epilogue.
//
//
// End epilogue.

