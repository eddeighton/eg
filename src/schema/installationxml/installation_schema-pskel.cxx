// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "installation_schema-pskel.hxx"

namespace installationxml
{
  // Installation_pskel
  //

  void Installation_pskel::
  Version_parser (::xml_schema::string_pskel& p)
  {
    this->Version_parser_ = &p;
  }

  void Installation_pskel::
  Python_parser (::xml_schema::string_pskel& p)
  {
    this->Python_parser_ = &p;
  }

  void Installation_pskel::
  Toolchain_parser (::xml_schema::string_pskel& p)
  {
    this->Toolchain_parser_ = &p;
  }

  void Installation_pskel::
  SDK_parser (::xml_schema::string_pskel& p)
  {
    this->SDK_parser_ = &p;
  }

  void Installation_pskel::
  parsers (::xml_schema::string_pskel& Version,
           ::xml_schema::string_pskel& Python,
           ::xml_schema::string_pskel& Toolchain,
           ::xml_schema::string_pskel& SDK)
  {
    this->Version_parser_ = &Version;
    this->Python_parser_ = &Python;
    this->Toolchain_parser_ = &Toolchain;
    this->SDK_parser_ = &SDK;
  }

  Installation_pskel::
  Installation_pskel ()
  : Installation_impl_ (0),
    Version_parser_ (0),
    Python_parser_ (0),
    Toolchain_parser_ (0),
    SDK_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  Installation_pskel::
  Installation_pskel (Installation_pskel* impl, void*)
  : ::xsde::cxx::parser::validating::complex_content (impl, 0),
    Installation_impl_ (impl),
    Version_parser_ (0),
    Python_parser_ (0),
    Toolchain_parser_ (0),
    SDK_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

#include <assert.h>

namespace installationxml
{
  // Installation_pskel
  //

  void Installation_pskel::
  Version (const ::std::string& x)
  {
    if (this->Installation_impl_)
      this->Installation_impl_->Version (x);
  }

  void Installation_pskel::
  Python (const ::std::string& x)
  {
    if (this->Installation_impl_)
      this->Installation_impl_->Python (x);
  }

  void Installation_pskel::
  Toolchain (const ::std::string& x)
  {
    if (this->Installation_impl_)
      this->Installation_impl_->Toolchain (x);
  }

  void Installation_pskel::
  SDK (const ::std::string& x)
  {
    if (this->Installation_impl_)
      this->Installation_impl_->SDK (x);
  }

  void Installation_pskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::parser::validating::complex_content base;
    base::_reset ();

    this->v_state_stack_.clear ();

    this->resetting_ = true;

    if (this->Version_parser_)
      this->Version_parser_->_reset ();

    if (this->Python_parser_)
      this->Python_parser_->_reset ();

    if (this->Toolchain_parser_)
      this->Toolchain_parser_->_reset ();

    if (this->SDK_parser_)
      this->SDK_parser_->_reset ();

    this->resetting_ = false;
  }
}

#include <assert.h>

namespace installationxml
{
  // Element validation and dispatch functions for Installation_pskel.
  //
  bool Installation_pskel::
  _start_element_impl (const ::xsde::cxx::ro_string& ns,
                       const ::xsde::cxx::ro_string& n)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (base::_start_element_impl (ns, n))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL && !ctx.error_type ())
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "Version" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &Installation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, true);
        }
        else
        {
          if (vd->count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return true;
          }

          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool Installation_pskel::
  _end_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      typedef ::xsde::cxx::parser::validating::complex_content base;
      if (!base::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void Installation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void Installation_pskel::
  _post_e_validate ()
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xsde::cxx::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, true);

      if (ctx.error_type ())
        return;

      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_schema_error (::xsde::cxx::schema_error::expected_element);

    this->v_state_stack_.pop ();
  }

  void Installation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xsde::cxx::ro_string& ns,
              const ::xsde::cxx::ro_string& n,
              bool start)
  {
    ::xsde::cxx::parser::context& ctx = this->_context ();

    XSDE_UNUSED (ctx);

    switch (state)
    {
      case 0UL:
      {
        if (n == "Version" && ns.empty ())
        {
          if (start)
          {
            if (this->Version_parser_)
            {
              this->Version_parser_->pre ();
              ctx.nested_parser (this->Version_parser_);
            }
          }
          else
          {
            if (this->Version_parser_ != 0)
            {
              const ::std::string& tmp = this->Version_parser_->post_string ();
              this->Version (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "Python" && ns.empty ())
        {
          if (start)
          {
            if (this->Python_parser_)
            {
              this->Python_parser_->pre ();
              ctx.nested_parser (this->Python_parser_);
            }
          }
          else
          {
            if (this->Python_parser_ != 0)
            {
              const ::std::string& tmp = this->Python_parser_->post_string ();
              this->Python (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "Toolchain" && ns.empty ())
        {
          if (start)
          {
            if (this->Toolchain_parser_)
            {
              this->Toolchain_parser_->pre ();
              ctx.nested_parser (this->Toolchain_parser_);
            }
          }
          else
          {
            if (this->Toolchain_parser_ != 0)
            {
              const ::std::string& tmp = this->Toolchain_parser_->post_string ();
              this->Toolchain (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "SDK" && ns.empty ())
        {
          if (start)
          {
            if (this->SDK_parser_)
            {
              this->SDK_parser_->pre ();
              ctx.nested_parser (this->SDK_parser_);
            }
          }
          else
          {
            if (this->SDK_parser_ != 0)
            {
              const ::std::string& tmp = this->SDK_parser_->post_string ();
              this->SDK (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            break;
          }

          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace installationxml
{
}

namespace installationxml
{
}

// Begin epilogue.
//
//
// End epilogue.

