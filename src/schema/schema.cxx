// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "schema.hxx"

// name
//

// Config
//

const ::name& Config::
name () const
{
  return this->name_;
}

::name& Config::
name ()
{
  return this->name_;
}

void Config::
name (const ::name& x)
{
  this->name_ = x;
}

bool Config::
file () const
{
  return this->file_;
}

bool& Config::
file ()
{
  return this->file_;
}

void Config::
file (bool x)
{
  this->file_ = x;
}

// eg
//

const ::std::string& eg::
host () const
{
  return this->host_;
}

::std::string& eg::
host ()
{
  return this->host_;
}

void eg::
host (const ::std::string& x)
{
  this->host_ = x;
}

const ::std::string& eg::
folder () const
{
  return this->folder_;
}

::std::string& eg::
folder ()
{
  return this->folder_;
}

void eg::
folder (const ::std::string& x)
{
  this->folder_ = x;
}

const eg::stuff_sequence& eg::
stuff () const
{
  return this->stuff_;
}

eg::stuff_sequence& eg::
stuff ()
{
  return this->stuff_;
}

#include <stdlib.h>
#include <new>

// name
//

name::
name ()
{
}

// Config
//

Config::
Config ()
{
}

Config::
~Config ()
{
}

Config::
Config (const Config& x)
{
  XSDE_UNUSED (x);
  this->name_ = x.name_;
  this->file_ = x.file_;
}

Config& Config::
operator= (const Config& x)
{
  XSDE_UNUSED (x);
  this->name_ = x.name_;
  this->file_ = x.file_;
  return *this;
}

// eg
//

eg::
eg ()
{
}

eg::
~eg ()
{
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

