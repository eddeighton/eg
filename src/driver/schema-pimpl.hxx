// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_PIMPL_HXX
#define W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_PIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_PAGGR
#  define XSDE_OMIT_PAGGR
#  define W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_PIMPL_HXX_CLEAR_OMIT_PAGGR
#endif

#include "schema-pskel.hxx"

#include <xsde/cxx/stack.hxx>

class Package_pimpl: public Package_pskel
{
  public:
  Package_pimpl (bool = false);

  ~Package_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  Name (const ::std::string&);

  virtual void
  Repository (const ::std::string&);

  virtual void
  License (const ::std::string&);

  virtual void
  Description (const ::std::string&);

  virtual void
  Directories (::Directories*);

  virtual void
  Files (::Files*);

  virtual ::Package*
  post_Package ();

  public:
  void
  pre_impl (::Package*);

  public:
  struct Package_pimpl_state
  {
    ::Package* Package_;
  };

  Package_pimpl_state Package_pimpl_state_;
  bool Package_pimpl_base_;
};

class Host_pimpl: public Host_pskel
{
  public:
  Host_pimpl (bool = false);

  ~Host_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  Name (const ::std::string&);

  virtual void
  Command (const ::std::string&);

  virtual void
  Repository (const ::std::string&);

  virtual void
  License (const ::std::string&);

  virtual void
  Description (const ::std::string&);

  virtual void
  Directories (::Directories1*);

  virtual void
  Files (::Files1*);

  virtual ::Host*
  post_Host ();

  public:
  void
  pre_impl (::Host*);

  public:
  struct Host_pimpl_state
  {
    ::Host* Host_;
  };

  Host_pimpl_state Host_pimpl_state_;
  bool Host_pimpl_base_;
};

class EG_pimpl: public EG_pskel
{
  public:
  EG_pimpl (bool = false);

  ~EG_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  choice_arm (choice_arm_tag);

  virtual void
  Package (::Package*);

  virtual void
  Host (::Host*);

  virtual ::EG*
  post_EG ();

  public:
  void
  pre_impl (::EG*);

  public:
  struct EG_pimpl_state
  {
    ::EG* EG_;
  };

  EG_pimpl_state EG_pimpl_state_;
  bool EG_pimpl_base_;
};

class Directories_pimpl: public Directories_pskel
{
  public:
  Directories_pimpl (bool = false);

  ~Directories_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  Include (const ::std::string&);

  virtual void
  Library (const ::std::string&);

  virtual ::Directories*
  post_Directories ();

  public:
  void
  pre_impl (::Directories*);

  public:
  struct Directories_pimpl_state
  {
    ::Directories* Directories_;
  };

  Directories_pimpl_state Directories_pimpl_state_;
  bool Directories_pimpl_base_;
};

class Files_pimpl: public Files_pskel
{
  public:
  Files_pimpl (bool = false);

  ~Files_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  Include (const ::std::string&);

  virtual void
  Library (const ::std::string&);

  virtual ::Files*
  post_Files ();

  public:
  void
  pre_impl (::Files*);

  public:
  struct Files_pimpl_state
  {
    ::Files* Files_;
  };

  Files_pimpl_state Files_pimpl_state_;
  bool Files_pimpl_base_;
};

class Directories1_pimpl: public Directories1_pskel
{
  public:
  Directories1_pimpl (bool = false);

  ~Directories1_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  Include (const ::std::string&);

  virtual void
  Library (const ::std::string&);

  virtual ::Directories1*
  post_Directories1 ();

  public:
  void
  pre_impl (::Directories1*);

  public:
  struct Directories1_pimpl_state
  {
    ::Directories1* Directories1_;
  };

  Directories1_pimpl_state Directories1_pimpl_state_;
  bool Directories1_pimpl_base_;
};

class Files1_pimpl: public Files1_pskel
{
  public:
  Files1_pimpl (bool = false);

  ~Files1_pimpl ();

  virtual void
  _reset ();

  virtual void
  pre ();

  // Elements.
  //
  virtual void
  Include (const ::std::string&);

  virtual void
  Library (const ::std::string&);

  virtual ::Files1*
  post_Files1 ();

  public:
  void
  pre_impl (::Files1*);

  public:
  struct Files1_pimpl_state
  {
    ::Files1* Files1_;
  };

  Files1_pimpl_state Files1_pimpl_state_;
  bool Files1_pimpl_base_;
};

#ifdef W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_PIMPL_HXX_CLEAR_OMIT_PAGGR
#  undef XSDE_OMIT_PAGGR
#endif

#ifndef XSDE_OMIT_PAGGR

// Parser aggregate for the EG element.
//
class EG_paggr
{
  public:
  EG_paggr ();

  void
  pre ()
  {
    this->EG_p_.pre ();
  }

  ::EG*
  post ()
  {
    return this->EG_p_.post_EG ();
  }

  ::EG_pimpl&
  root_parser ()
  {
    return this->EG_p_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->EG_p_._reset ();
  }

  public:
  ::Package_pimpl Package_p_;
  ::Directories_pimpl Directories_p_;
  ::Files_pimpl Files_p_;
  ::Host_pimpl Host_p_;
  ::Directories1_pimpl Directories1_p_;
  ::Files1_pimpl Files1_p_;
  ::EG_pimpl EG_p_;
  ::xml_schema::string_pimpl string_p_;
};

#endif // XSDE_OMIT_PAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_PIMPL_HXX
