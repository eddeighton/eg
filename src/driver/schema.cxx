// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "schema.hxx"

// Package
//

const ::std::string& Package::
Name () const
{
  return this->Name_;
}

::std::string& Package::
Name ()
{
  return this->Name_;
}

void Package::
Name (const ::std::string& x)
{
  this->Name_ = x;
}

bool Package::
Repository_present () const
{
  return this->Repository_present_;
}

void Package::
Repository_present (bool x)
{
  this->Repository_present_ = x;
}

const ::std::string& Package::
Repository () const
{
  return this->Repository_;
}

::std::string& Package::
Repository ()
{
  return this->Repository_;
}

void Package::
Repository (const ::std::string& x)
{
  this->Repository_ = x;
  this->Repository_present_ = true;
}

const ::std::string& Package::
License () const
{
  return this->License_;
}

::std::string& Package::
License ()
{
  return this->License_;
}

void Package::
License (const ::std::string& x)
{
  this->License_ = x;
}

bool Package::
Description_present () const
{
  return this->Description_present_;
}

void Package::
Description_present (bool x)
{
  this->Description_present_ = x;
}

const ::std::string& Package::
Description () const
{
  return this->Description_;
}

::std::string& Package::
Description ()
{
  return this->Description_;
}

void Package::
Description (const ::std::string& x)
{
  this->Description_ = x;
  this->Description_present_ = true;
}

bool Package::
Directories_present () const
{
  return this->Directories_ != 0;
}

const ::Directories& Package::
Directories () const
{
  return *this->Directories_;
}

::Directories& Package::
Directories ()
{
  return *this->Directories_;
}

void Package::
Directories (::Directories* x)
{
  delete this->Directories_;
  this->Directories_ = x;
}

bool Package::
Files_present () const
{
  return this->Files_ != 0;
}

const ::Files& Package::
Files () const
{
  return *this->Files_;
}

::Files& Package::
Files ()
{
  return *this->Files_;
}

void Package::
Files (::Files* x)
{
  delete this->Files_;
  this->Files_ = x;
}

// Host
//

const ::std::string& Host::
Name () const
{
  return this->Name_;
}

::std::string& Host::
Name ()
{
  return this->Name_;
}

void Host::
Name (const ::std::string& x)
{
  this->Name_ = x;
}

const ::std::string& Host::
Command () const
{
  return this->Command_;
}

::std::string& Host::
Command ()
{
  return this->Command_;
}

void Host::
Command (const ::std::string& x)
{
  this->Command_ = x;
}

bool Host::
Repository_present () const
{
  return this->Repository_present_;
}

void Host::
Repository_present (bool x)
{
  this->Repository_present_ = x;
}

const ::std::string& Host::
Repository () const
{
  return this->Repository_;
}

::std::string& Host::
Repository ()
{
  return this->Repository_;
}

void Host::
Repository (const ::std::string& x)
{
  this->Repository_ = x;
  this->Repository_present_ = true;
}

const ::std::string& Host::
License () const
{
  return this->License_;
}

::std::string& Host::
License ()
{
  return this->License_;
}

void Host::
License (const ::std::string& x)
{
  this->License_ = x;
}

bool Host::
Description_present () const
{
  return this->Description_present_;
}

void Host::
Description_present (bool x)
{
  this->Description_present_ = x;
}

const ::std::string& Host::
Description () const
{
  return this->Description_;
}

::std::string& Host::
Description ()
{
  return this->Description_;
}

void Host::
Description (const ::std::string& x)
{
  this->Description_ = x;
  this->Description_present_ = true;
}

bool Host::
Directories_present () const
{
  return this->Directories_ != 0;
}

const ::Directories1& Host::
Directories () const
{
  return *this->Directories_;
}

::Directories1& Host::
Directories ()
{
  return *this->Directories_;
}

void Host::
Directories (::Directories1* x)
{
  delete this->Directories_;
  this->Directories_ = x;
}

bool Host::
Files_present () const
{
  return this->Files_ != 0;
}

const ::Files1& Host::
Files () const
{
  return *this->Files_;
}

::Files1& Host::
Files ()
{
  return *this->Files_;
}

void Host::
Files (::Files1* x)
{
  delete this->Files_;
  this->Files_ = x;
}

// EG
//

EG::choice_arm_tag EG::
choice_arm () const
{
  return this->choice_arm_;
}

const ::Package& EG::
Package () const
{
  return *this->choice_.Package_;
}

::Package& EG::
Package ()
{
  return *this->choice_.Package_;
}

void EG::
Package (::Package* x)
{
  if (this->choice_arm_ != Package_tag)
    this->choice_arm (Package_tag);
  else
  {
    delete this->choice_.Package_;
  }

  this->choice_.Package_ = x;
}

const ::Host& EG::
Host () const
{
  return *this->choice_.Host_;
}

::Host& EG::
Host ()
{
  return *this->choice_.Host_;
}

void EG::
Host (::Host* x)
{
  if (this->choice_arm_ != Host_tag)
    this->choice_arm (Host_tag);
  else
  {
    delete this->choice_.Host_;
  }

  this->choice_.Host_ = x;
}

// Directories
//

const Directories::Include_sequence& Directories::
Include () const
{
  return this->Include_;
}

Directories::Include_sequence& Directories::
Include ()
{
  return this->Include_;
}

const Directories::Library_sequence& Directories::
Library () const
{
  return this->Library_;
}

Directories::Library_sequence& Directories::
Library ()
{
  return this->Library_;
}

// Files
//

const Files::Include_sequence& Files::
Include () const
{
  return this->Include_;
}

Files::Include_sequence& Files::
Include ()
{
  return this->Include_;
}

const Files::Library_sequence& Files::
Library () const
{
  return this->Library_;
}

Files::Library_sequence& Files::
Library ()
{
  return this->Library_;
}

// Directories1
//

const Directories1::Include_sequence& Directories1::
Include () const
{
  return this->Include_;
}

Directories1::Include_sequence& Directories1::
Include ()
{
  return this->Include_;
}

const Directories1::Library_sequence& Directories1::
Library () const
{
  return this->Library_;
}

Directories1::Library_sequence& Directories1::
Library ()
{
  return this->Library_;
}

// Files1
//

const Files1::Include_sequence& Files1::
Include () const
{
  return this->Include_;
}

Files1::Include_sequence& Files1::
Include ()
{
  return this->Include_;
}

const Files1::Library_sequence& Files1::
Library () const
{
  return this->Library_;
}

Files1::Library_sequence& Files1::
Library ()
{
  return this->Library_;
}

#include <stdlib.h>
#include <new>

// Package
//

Package::
Package ()
{
  this->Repository_present_ = false;
  this->Description_present_ = false;
  this->Directories_ = 0;
  this->Files_ = 0;
}

Package::
~Package ()
{
  delete this->Directories_;
  delete this->Files_;
}

// Host
//

Host::
Host ()
{
  this->Repository_present_ = false;
  this->Description_present_ = false;
  this->Directories_ = 0;
  this->Files_ = 0;
}

Host::
~Host ()
{
  delete this->Directories_;
  delete this->Files_;
}

// EG
//

EG::
EG ()
{
  this->choice_arm_ = choice_arm_tag (2);
}

EG::
~EG ()
{
  this->choice_arm (choice_arm_tag (2));
}

void EG::
choice_arm (choice_arm_tag x)
{
  if (this->choice_arm_ == x)
    return;

  switch (this->choice_arm_)
  {
    case Package_tag:
    {
      delete this->choice_.Package_;
      break;
    }
    case Host_tag:
    {
      delete this->choice_.Host_;
      break;
    }
    default:
    break;
  }

  this->choice_arm_ = choice_arm_tag (2);

  switch (x)
  {
    case Package_tag:
    {
      this->choice_.Package_ = 0;
      break;
    }
    case Host_tag:
    {
      this->choice_.Host_ = 0;
      break;
    }
    default:
    break;
  }

  this->choice_arm_ = x;
}

// Directories
//

Directories::
Directories ()
{
}

Directories::
~Directories ()
{
}

// Files
//

Files::
Files ()
{
}

Files::
~Files ()
{
}

// Directories1
//

Directories1::
Directories1 ()
{
}

Directories1::
~Directories1 ()
{
}

// Files1
//

Files1::
Files1 ()
{
}

Files1::
~Files1 ()
{
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

