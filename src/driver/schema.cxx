// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "schema.hxx"

namespace egxml
{
  // Package
  //

  const ::std::string& Package::
  Name () const
  {
    return this->Name_;
  }

  ::std::string& Package::
  Name ()
  {
    return this->Name_;
  }

  void Package::
  Name (const ::std::string& x)
  {
    this->Name_ = x;
  }

  bool Package::
  Repository_present () const
  {
    return this->Repository_present_;
  }

  void Package::
  Repository_present (bool x)
  {
    this->Repository_present_ = x;
  }

  const ::std::string& Package::
  Repository () const
  {
    return this->Repository_;
  }

  ::std::string& Package::
  Repository ()
  {
    return this->Repository_;
  }

  void Package::
  Repository (const ::std::string& x)
  {
    this->Repository_ = x;
    this->Repository_present_ = true;
  }

  const ::std::string& Package::
  License () const
  {
    return this->License_;
  }

  ::std::string& Package::
  License ()
  {
    return this->License_;
  }

  void Package::
  License (const ::std::string& x)
  {
    this->License_ = x;
  }

  bool Package::
  Description_present () const
  {
    return this->Description_present_;
  }

  void Package::
  Description_present (bool x)
  {
    this->Description_present_ = x;
  }

  const ::std::string& Package::
  Description () const
  {
    return this->Description_;
  }

  ::std::string& Package::
  Description ()
  {
    return this->Description_;
  }

  void Package::
  Description (const ::std::string& x)
  {
    this->Description_ = x;
    this->Description_present_ = true;
  }

  bool Package::
  Directories_present () const
  {
    return this->Directories_ != 0;
  }

  const ::egxml::Directories& Package::
  Directories () const
  {
    return *this->Directories_;
  }

  ::egxml::Directories& Package::
  Directories ()
  {
    return *this->Directories_;
  }

  void Package::
  Directories (::egxml::Directories* x)
  {
    delete this->Directories_;
    this->Directories_ = x;
  }

  bool Package::
  Files_present () const
  {
    return this->Files_ != 0;
  }

  const ::egxml::Files& Package::
  Files () const
  {
    return *this->Files_;
  }

  ::egxml::Files& Package::
  Files ()
  {
    return *this->Files_;
  }

  void Package::
  Files (::egxml::Files* x)
  {
    delete this->Files_;
    this->Files_ = x;
  }

  // Host
  //

  const ::std::string& Host::
  Command () const
  {
    return this->Command_;
  }

  ::std::string& Host::
  Command ()
  {
    return this->Command_;
  }

  void Host::
  Command (const ::std::string& x)
  {
    this->Command_ = x;
  }

  // Build
  //

  const ::std::string& Build::
  Name () const
  {
    return this->Name_;
  }

  ::std::string& Build::
  Name ()
  {
    return this->Name_;
  }

  void Build::
  Name (const ::std::string& x)
  {
    this->Name_ = x;
  }

  const ::std::string& Build::
  CompilerFlags () const
  {
    return this->CompilerFlags_;
  }

  ::std::string& Build::
  CompilerFlags ()
  {
    return this->CompilerFlags_;
  }

  void Build::
  CompilerFlags (const ::std::string& x)
  {
    this->CompilerFlags_ = x;
  }

  const ::std::string& Build::
  LinkerFlags () const
  {
    return this->LinkerFlags_;
  }

  ::std::string& Build::
  LinkerFlags ()
  {
    return this->LinkerFlags_;
  }

  void Build::
  LinkerFlags (const ::std::string& x)
  {
    this->LinkerFlags_ = x;
  }

  // Project
  //

  const ::std::string& Project::
  Name () const
  {
    return this->Name_;
  }

  ::std::string& Project::
  Name ()
  {
    return this->Name_;
  }

  void Project::
  Name (const ::std::string& x)
  {
    this->Name_ = x;
  }

  const ::egxml::Host& Project::
  Host () const
  {
    return *this->Host_;
  }

  ::egxml::Host& Project::
  Host ()
  {
    return *this->Host_;
  }

  void Project::
  Host (::egxml::Host* x)
  {
    delete this->Host_;
    this->Host_ = x;
  }

  const Project::Package_sequence& Project::
  Package () const
  {
    return this->Package_;
  }

  Project::Package_sequence& Project::
  Package ()
  {
    return this->Package_;
  }

  const Project::Build_sequence& Project::
  Build () const
  {
    return this->Build_;
  }

  Project::Build_sequence& Project::
  Build ()
  {
    return this->Build_;
  }

  const Project::Run_sequence& Project::
  Run () const
  {
    return this->Run_;
  }

  Project::Run_sequence& Project::
  Run ()
  {
    return this->Run_;
  }

  // EG
  //

  EG::choice_arm_tag EG::
  choice_arm () const
  {
    return this->choice_arm_;
  }

  const ::egxml::Package& EG::
  Package () const
  {
    return *this->choice_.Package_;
  }

  ::egxml::Package& EG::
  Package ()
  {
    return *this->choice_.Package_;
  }

  void EG::
  Package (::egxml::Package* x)
  {
    if (this->choice_arm_ != Package_tag)
      this->choice_arm (Package_tag);
    else
    {
      delete this->choice_.Package_;
    }

    this->choice_.Package_ = x;
  }

  const ::egxml::Host& EG::
  Host () const
  {
    return *this->choice_.Host_;
  }

  ::egxml::Host& EG::
  Host ()
  {
    return *this->choice_.Host_;
  }

  void EG::
  Host (::egxml::Host* x)
  {
    if (this->choice_arm_ != Host_tag)
      this->choice_arm (Host_tag);
    else
    {
      delete this->choice_.Host_;
    }

    this->choice_.Host_ = x;
  }

  const ::egxml::Project& EG::
  Project () const
  {
    return *this->choice_.Project_;
  }

  ::egxml::Project& EG::
  Project ()
  {
    return *this->choice_.Project_;
  }

  void EG::
  Project (::egxml::Project* x)
  {
    if (this->choice_arm_ != Project_tag)
      this->choice_arm (Project_tag);
    else
    {
      delete this->choice_.Project_;
    }

    this->choice_.Project_ = x;
  }

  // Directories
  //

  const Directories::Include_sequence& Directories::
  Include () const
  {
    return this->Include_;
  }

  Directories::Include_sequence& Directories::
  Include ()
  {
    return this->Include_;
  }

  const Directories::Library_sequence& Directories::
  Library () const
  {
    return this->Library_;
  }

  Directories::Library_sequence& Directories::
  Library ()
  {
    return this->Library_;
  }

  // Files
  //

  const Files::System_sequence& Files::
  System () const
  {
    return this->System_;
  }

  Files::System_sequence& Files::
  System ()
  {
    return this->System_;
  }

  const Files::User_sequence& Files::
  User () const
  {
    return this->User_;
  }

  Files::User_sequence& Files::
  User ()
  {
    return this->User_;
  }

  const Files::Library_sequence& Files::
  Library () const
  {
    return this->Library_;
  }

  Files::Library_sequence& Files::
  Library ()
  {
    return this->Library_;
  }

  // Run
  //

  const ::std::string& Run::
  Name () const
  {
    return this->Name_;
  }

  ::std::string& Run::
  Name ()
  {
    return this->Name_;
  }

  void Run::
  Name (const ::std::string& x)
  {
    this->Name_ = x;
  }

  const Run::Argument_sequence& Run::
  Argument () const
  {
    return this->Argument_;
  }

  Run::Argument_sequence& Run::
  Argument ()
  {
    return this->Argument_;
  }
}

#include <stdlib.h>
#include <new>

namespace egxml
{
  // Package
  //

  Package::
  Package ()
  {
    this->Repository_present_ = false;
    this->Description_present_ = false;
    this->Directories_ = 0;
    this->Files_ = 0;
  }

  Package::
  ~Package ()
  {
    delete this->Directories_;
    delete this->Files_;
  }

  // Host
  //

  Host::
  Host ()
  {
  }

  Host::
  ~Host ()
  {
  }

  // Build
  //

  Build::
  Build ()
  {
  }

  Build::
  ~Build ()
  {
  }

  Build::
  Build (const Build& x)
  {
    XSDE_UNUSED (x);
    this->Name_ = x.Name_;
    this->CompilerFlags_ = x.CompilerFlags_;
    this->LinkerFlags_ = x.LinkerFlags_;
  }

  Build& Build::
  operator= (const Build& x)
  {
    XSDE_UNUSED (x);
    this->Name_ = x.Name_;
    this->CompilerFlags_ = x.CompilerFlags_;
    this->LinkerFlags_ = x.LinkerFlags_;
    return *this;
  }

  // Project
  //

  Project::
  Project ()
  {
    this->Host_ = 0;
  }

  Project::
  ~Project ()
  {
    delete this->Host_;
  }

  // EG
  //

  EG::
  EG ()
  {
    this->choice_arm_ = choice_arm_tag (3);
  }

  EG::
  ~EG ()
  {
    this->choice_arm (choice_arm_tag (3));
  }

  void EG::
  choice_arm (choice_arm_tag x)
  {
    if (this->choice_arm_ == x)
      return;

    switch (this->choice_arm_)
    {
      case Package_tag:
      {
        delete this->choice_.Package_;
        break;
      }
      case Host_tag:
      {
        delete this->choice_.Host_;
        break;
      }
      case Project_tag:
      {
        delete this->choice_.Project_;
        break;
      }
      default:
      break;
    }

    this->choice_arm_ = choice_arm_tag (3);

    switch (x)
    {
      case Package_tag:
      {
        this->choice_.Package_ = 0;
        break;
      }
      case Host_tag:
      {
        this->choice_.Host_ = 0;
        break;
      }
      case Project_tag:
      {
        this->choice_.Project_ = 0;
        break;
      }
      default:
      break;
    }

    this->choice_arm_ = x;
  }

  // Directories
  //

  Directories::
  Directories ()
  {
  }

  Directories::
  ~Directories ()
  {
  }

  // Files
  //

  Files::
  Files ()
  {
  }

  Files::
  ~Files ()
  {
  }

  // Run
  //

  Run::
  Run ()
  {
  }

  Run::
  ~Run ()
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

