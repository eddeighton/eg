// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "schema-pimpl.hxx"

#include <xsde/cxx/parser/validating/string-common.hxx>

// Package_pimpl
//

Package_pimpl::
Package_pimpl (bool b)
{
  this->Package_pimpl_base_ = b;
  this->Package_pimpl_state_.Package_ = 0;
}

Package_pimpl::
~Package_pimpl ()
{
  if (!this->Package_pimpl_base_ && this->Package_pimpl_state_.Package_)
    delete this->Package_pimpl_state_.Package_;
}

void Package_pimpl::
_reset ()
{
  Package_pskel::_reset ();

  if (!this->Package_pimpl_base_ && this->Package_pimpl_state_.Package_)
  {
    delete this->Package_pimpl_state_.Package_;
    this->Package_pimpl_state_.Package_ = 0;
  }
}

void Package_pimpl::
pre_impl (::Package* x)
{
  this->Package_pimpl_state_.Package_ = x;
}

void Package_pimpl::
pre ()
{
  ::Package* x = new ::Package;
  this->pre_impl (x);
}

void Package_pimpl::
Name (const ::std::string& x)
{
  this->Package_pimpl_state_.Package_->Name (x);
}

void Package_pimpl::
Repository (const ::std::string& x)
{
  this->Package_pimpl_state_.Package_->Repository (x);
}

void Package_pimpl::
License (const ::std::string& x)
{
  this->Package_pimpl_state_.Package_->License (x);
}

void Package_pimpl::
Description (const ::std::string& x)
{
  this->Package_pimpl_state_.Package_->Description (x);
}

void Package_pimpl::
Directories (::Directories* x)
{
  this->Package_pimpl_state_.Package_->Directories (x);
}

void Package_pimpl::
Files (::Files* x)
{
  this->Package_pimpl_state_.Package_->Files (x);
}

::Package* Package_pimpl::
post_Package ()
{
  ::Package* r = this->Package_pimpl_state_.Package_;
  this->Package_pimpl_state_.Package_ = 0;
  return r;
}

// Host_pimpl
//

Host_pimpl::
Host_pimpl (bool b)
{
  this->Host_pimpl_base_ = b;
  this->Host_pimpl_state_.Host_ = 0;
}

Host_pimpl::
~Host_pimpl ()
{
  if (!this->Host_pimpl_base_ && this->Host_pimpl_state_.Host_)
    delete this->Host_pimpl_state_.Host_;
}

void Host_pimpl::
_reset ()
{
  Host_pskel::_reset ();

  if (!this->Host_pimpl_base_ && this->Host_pimpl_state_.Host_)
  {
    delete this->Host_pimpl_state_.Host_;
    this->Host_pimpl_state_.Host_ = 0;
  }
}

void Host_pimpl::
pre_impl (::Host* x)
{
  this->Host_pimpl_state_.Host_ = x;
}

void Host_pimpl::
pre ()
{
  ::Host* x = new ::Host;
  this->pre_impl (x);
}

void Host_pimpl::
Name (const ::std::string& x)
{
  this->Host_pimpl_state_.Host_->Name (x);
}

void Host_pimpl::
Command (const ::std::string& x)
{
  this->Host_pimpl_state_.Host_->Command (x);
}

void Host_pimpl::
Repository (const ::std::string& x)
{
  this->Host_pimpl_state_.Host_->Repository (x);
}

void Host_pimpl::
License (const ::std::string& x)
{
  this->Host_pimpl_state_.Host_->License (x);
}

void Host_pimpl::
Description (const ::std::string& x)
{
  this->Host_pimpl_state_.Host_->Description (x);
}

void Host_pimpl::
Directories (::Directories1* x)
{
  this->Host_pimpl_state_.Host_->Directories (x);
}

void Host_pimpl::
Files (::Files1* x)
{
  this->Host_pimpl_state_.Host_->Files (x);
}

::Host* Host_pimpl::
post_Host ()
{
  ::Host* r = this->Host_pimpl_state_.Host_;
  this->Host_pimpl_state_.Host_ = 0;
  return r;
}

// EG_pimpl
//

EG_pimpl::
EG_pimpl (bool b)
{
  this->EG_pimpl_base_ = b;
  this->EG_pimpl_state_.EG_ = 0;
}

EG_pimpl::
~EG_pimpl ()
{
  if (!this->EG_pimpl_base_ && this->EG_pimpl_state_.EG_)
    delete this->EG_pimpl_state_.EG_;
}

void EG_pimpl::
_reset ()
{
  EG_pskel::_reset ();

  if (!this->EG_pimpl_base_ && this->EG_pimpl_state_.EG_)
  {
    delete this->EG_pimpl_state_.EG_;
    this->EG_pimpl_state_.EG_ = 0;
  }
}

void EG_pimpl::
pre_impl (::EG* x)
{
  this->EG_pimpl_state_.EG_ = x;
}

void EG_pimpl::
pre ()
{
  ::EG* x = new ::EG;
  this->pre_impl (x);
}

void EG_pimpl::
choice_arm (choice_arm_tag t)
{
  this->EG_pimpl_state_.EG_->choice_arm (
    static_cast< ::EG::choice_arm_tag > (t));
}

void EG_pimpl::
Package (::Package* x)
{
  this->EG_pimpl_state_.EG_->Package (x);
}

void EG_pimpl::
Host (::Host* x)
{
  this->EG_pimpl_state_.EG_->Host (x);
}

::EG* EG_pimpl::
post_EG ()
{
  ::EG* r = this->EG_pimpl_state_.EG_;
  this->EG_pimpl_state_.EG_ = 0;
  return r;
}

// Directories_pimpl
//

Directories_pimpl::
Directories_pimpl (bool b)
{
  this->Directories_pimpl_base_ = b;
  this->Directories_pimpl_state_.Directories_ = 0;
}

Directories_pimpl::
~Directories_pimpl ()
{
  if (!this->Directories_pimpl_base_ && this->Directories_pimpl_state_.Directories_)
    delete this->Directories_pimpl_state_.Directories_;
}

void Directories_pimpl::
_reset ()
{
  Directories_pskel::_reset ();

  if (!this->Directories_pimpl_base_ && this->Directories_pimpl_state_.Directories_)
  {
    delete this->Directories_pimpl_state_.Directories_;
    this->Directories_pimpl_state_.Directories_ = 0;
  }
}

void Directories_pimpl::
pre_impl (::Directories* x)
{
  this->Directories_pimpl_state_.Directories_ = x;
}

void Directories_pimpl::
pre ()
{
  ::Directories* x = new ::Directories;
  this->pre_impl (x);
}

void Directories_pimpl::
Include (const ::std::string& x)
{
  this->Directories_pimpl_state_.Directories_->Include ().push_back (x);
}

void Directories_pimpl::
Library (const ::std::string& x)
{
  this->Directories_pimpl_state_.Directories_->Library ().push_back (x);
}

::Directories* Directories_pimpl::
post_Directories ()
{
  ::Directories* r = this->Directories_pimpl_state_.Directories_;
  this->Directories_pimpl_state_.Directories_ = 0;
  return r;
}

// Files_pimpl
//

Files_pimpl::
Files_pimpl (bool b)
{
  this->Files_pimpl_base_ = b;
  this->Files_pimpl_state_.Files_ = 0;
}

Files_pimpl::
~Files_pimpl ()
{
  if (!this->Files_pimpl_base_ && this->Files_pimpl_state_.Files_)
    delete this->Files_pimpl_state_.Files_;
}

void Files_pimpl::
_reset ()
{
  Files_pskel::_reset ();

  if (!this->Files_pimpl_base_ && this->Files_pimpl_state_.Files_)
  {
    delete this->Files_pimpl_state_.Files_;
    this->Files_pimpl_state_.Files_ = 0;
  }
}

void Files_pimpl::
pre_impl (::Files* x)
{
  this->Files_pimpl_state_.Files_ = x;
}

void Files_pimpl::
pre ()
{
  ::Files* x = new ::Files;
  this->pre_impl (x);
}

void Files_pimpl::
Include (const ::std::string& x)
{
  this->Files_pimpl_state_.Files_->Include ().push_back (x);
}

void Files_pimpl::
Library (const ::std::string& x)
{
  this->Files_pimpl_state_.Files_->Library ().push_back (x);
}

::Files* Files_pimpl::
post_Files ()
{
  ::Files* r = this->Files_pimpl_state_.Files_;
  this->Files_pimpl_state_.Files_ = 0;
  return r;
}

// Directories1_pimpl
//

Directories1_pimpl::
Directories1_pimpl (bool b)
{
  this->Directories1_pimpl_base_ = b;
  this->Directories1_pimpl_state_.Directories1_ = 0;
}

Directories1_pimpl::
~Directories1_pimpl ()
{
  if (!this->Directories1_pimpl_base_ && this->Directories1_pimpl_state_.Directories1_)
    delete this->Directories1_pimpl_state_.Directories1_;
}

void Directories1_pimpl::
_reset ()
{
  Directories1_pskel::_reset ();

  if (!this->Directories1_pimpl_base_ && this->Directories1_pimpl_state_.Directories1_)
  {
    delete this->Directories1_pimpl_state_.Directories1_;
    this->Directories1_pimpl_state_.Directories1_ = 0;
  }
}

void Directories1_pimpl::
pre_impl (::Directories1* x)
{
  this->Directories1_pimpl_state_.Directories1_ = x;
}

void Directories1_pimpl::
pre ()
{
  ::Directories1* x = new ::Directories1;
  this->pre_impl (x);
}

void Directories1_pimpl::
Include (const ::std::string& x)
{
  this->Directories1_pimpl_state_.Directories1_->Include ().push_back (x);
}

void Directories1_pimpl::
Library (const ::std::string& x)
{
  this->Directories1_pimpl_state_.Directories1_->Library ().push_back (x);
}

::Directories1* Directories1_pimpl::
post_Directories1 ()
{
  ::Directories1* r = this->Directories1_pimpl_state_.Directories1_;
  this->Directories1_pimpl_state_.Directories1_ = 0;
  return r;
}

// Files1_pimpl
//

Files1_pimpl::
Files1_pimpl (bool b)
{
  this->Files1_pimpl_base_ = b;
  this->Files1_pimpl_state_.Files1_ = 0;
}

Files1_pimpl::
~Files1_pimpl ()
{
  if (!this->Files1_pimpl_base_ && this->Files1_pimpl_state_.Files1_)
    delete this->Files1_pimpl_state_.Files1_;
}

void Files1_pimpl::
_reset ()
{
  Files1_pskel::_reset ();

  if (!this->Files1_pimpl_base_ && this->Files1_pimpl_state_.Files1_)
  {
    delete this->Files1_pimpl_state_.Files1_;
    this->Files1_pimpl_state_.Files1_ = 0;
  }
}

void Files1_pimpl::
pre_impl (::Files1* x)
{
  this->Files1_pimpl_state_.Files1_ = x;
}

void Files1_pimpl::
pre ()
{
  ::Files1* x = new ::Files1;
  this->pre_impl (x);
}

void Files1_pimpl::
Include (const ::std::string& x)
{
  this->Files1_pimpl_state_.Files1_->Include ().push_back (x);
}

void Files1_pimpl::
Library (const ::std::string& x)
{
  this->Files1_pimpl_state_.Files1_->Library ().push_back (x);
}

::Files1* Files1_pimpl::
post_Files1 ()
{
  ::Files1* r = this->Files1_pimpl_state_.Files1_;
  this->Files1_pimpl_state_.Files1_ = 0;
  return r;
}

// EG_paggr
//

EG_paggr::
EG_paggr ()
{
  this->Package_p_.parsers (this->string_p_,
                            this->string_p_,
                            this->string_p_,
                            this->string_p_,
                            this->Directories_p_,
                            this->Files_p_);

  this->Directories_p_.parsers (this->string_p_,
                                this->string_p_);

  this->Files_p_.parsers (this->string_p_,
                          this->string_p_);

  this->Host_p_.parsers (this->string_p_,
                         this->string_p_,
                         this->string_p_,
                         this->string_p_,
                         this->string_p_,
                         this->Directories1_p_,
                         this->Files1_p_);

  this->Directories1_p_.parsers (this->string_p_,
                                 this->string_p_);

  this->Files1_p_.parsers (this->string_p_,
                           this->string_p_);

  this->EG_p_.parsers (this->Package_p_,
                       this->Host_p_);
}

const char* EG_paggr::
root_name ()
{
  return "EG";
}

const char* EG_paggr::
root_namespace ()
{
  return "";
}

// Begin epilogue.
//
//
// End epilogue.

