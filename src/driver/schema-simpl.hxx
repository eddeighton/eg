// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_SIMPL_HXX
#define W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_SIMPL_HXX

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#ifndef XSDE_OMIT_SAGGR
#  define XSDE_OMIT_SAGGR
#  define W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_SIMPL_HXX_CLEAR_OMIT_SAGGR
#endif

#include "schema-sskel.hxx"

#include <xsde/cxx/stack.hxx>

class Package_simpl: public Package_sskel
{
  public:
  virtual void
  pre (const ::Package&);

  // Elements.
  //
  virtual ::std::string
  Name ();

  virtual bool
  Repository_present ();

  virtual ::std::string
  Repository ();

  virtual ::std::string
  License ();

  virtual bool
  Description_present ();

  virtual ::std::string
  Description ();

  virtual bool
  Directories_present ();

  virtual const ::Directories&
  Directories ();

  virtual bool
  Files_present ();

  virtual const ::Files&
  Files ();

  public:
  struct Package_simpl_state
  {
    const ::Package* Package_;
  };

  Package_simpl_state Package_simpl_state_;
};

class Host_simpl: public Host_sskel
{
  public:
  virtual void
  pre (const ::Host&);

  // Elements.
  //
  virtual ::std::string
  Name ();

  virtual ::std::string
  Command ();

  virtual bool
  Repository_present ();

  virtual ::std::string
  Repository ();

  virtual ::std::string
  License ();

  virtual bool
  Description_present ();

  virtual ::std::string
  Description ();

  virtual bool
  Directories_present ();

  virtual const ::Directories1&
  Directories ();

  virtual bool
  Files_present ();

  virtual const ::Files1&
  Files ();

  public:
  struct Host_simpl_state
  {
    const ::Host* Host_;
  };

  Host_simpl_state Host_simpl_state_;
};

class EG_simpl: public EG_sskel
{
  public:
  virtual void
  pre (const ::EG&);

  // Elements.
  //
  virtual choice_arm_tag
  choice_arm ();

  virtual const ::Package&
  Package ();

  virtual const ::Host&
  Host ();

  public:
  struct EG_simpl_state
  {
    const ::EG* EG_;
  };

  EG_simpl_state EG_simpl_state_;
};

class Directories_simpl: public Directories_sskel
{
  public:
  virtual void
  pre (const ::Directories&);

  // Elements.
  //
  virtual bool
  Include_next ();

  virtual ::std::string
  Include ();

  virtual bool
  Library_next ();

  virtual ::std::string
  Library ();

  public:
  struct Directories_simpl_state
  {
    const ::Directories* Directories_;
    ::Directories::Include_const_iterator Include_;
    ::Directories::Include_const_iterator Include_end_;
    ::Directories::Library_const_iterator Library_;
    ::Directories::Library_const_iterator Library_end_;
  };

  Directories_simpl_state Directories_simpl_state_;
};

class Files_simpl: public Files_sskel
{
  public:
  virtual void
  pre (const ::Files&);

  // Elements.
  //
  virtual bool
  Include_next ();

  virtual ::std::string
  Include ();

  virtual bool
  Library_next ();

  virtual ::std::string
  Library ();

  public:
  struct Files_simpl_state
  {
    const ::Files* Files_;
    ::Files::Include_const_iterator Include_;
    ::Files::Include_const_iterator Include_end_;
    ::Files::Library_const_iterator Library_;
    ::Files::Library_const_iterator Library_end_;
  };

  Files_simpl_state Files_simpl_state_;
};

class Directories1_simpl: public Directories1_sskel
{
  public:
  virtual void
  pre (const ::Directories1&);

  // Elements.
  //
  virtual bool
  Include_next ();

  virtual ::std::string
  Include ();

  virtual bool
  Library_next ();

  virtual ::std::string
  Library ();

  public:
  struct Directories1_simpl_state
  {
    const ::Directories1* Directories1_;
    ::Directories1::Include_const_iterator Include_;
    ::Directories1::Include_const_iterator Include_end_;
    ::Directories1::Library_const_iterator Library_;
    ::Directories1::Library_const_iterator Library_end_;
  };

  Directories1_simpl_state Directories1_simpl_state_;
};

class Files1_simpl: public Files1_sskel
{
  public:
  virtual void
  pre (const ::Files1&);

  // Elements.
  //
  virtual bool
  Include_next ();

  virtual ::std::string
  Include ();

  virtual bool
  Library_next ();

  virtual ::std::string
  Library ();

  public:
  struct Files1_simpl_state
  {
    const ::Files1* Files1_;
    ::Files1::Include_const_iterator Include_;
    ::Files1::Include_const_iterator Include_end_;
    ::Files1::Library_const_iterator Library_;
    ::Files1::Library_const_iterator Library_end_;
  };

  Files1_simpl_state Files1_simpl_state_;
};

#ifdef W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_SIMPL_HXX_CLEAR_OMIT_SAGGR
#  undef XSDE_OMIT_SAGGR
#endif

#ifndef XSDE_OMIT_SAGGR

// Serializer aggregate for the EG element.
//
class EG_saggr
{
  public:
  EG_saggr ();

  void
  pre (const ::EG& x)
  {
    this->EG_s_.pre (x);
  }

  void
  post ()
  {
    this->EG_s_.post ();
  }

  ::EG_simpl&
  root_serializer ()
  {
    return this->EG_s_;
  }

  static const char*
  root_name ();

  static const char*
  root_namespace ();

  void
  reset ()
  {
    this->EG_s_._reset ();
  }

  public:
  ::Package_simpl Package_s_;
  ::Directories_simpl Directories_s_;
  ::Files_simpl Files_s_;
  ::Host_simpl Host_s_;
  ::Directories1_simpl Directories1_s_;
  ::Files1_simpl Files1_s_;
  ::EG_simpl EG_s_;
  ::xml_schema::string_simpl string_s_;
};

#endif // XSDE_OMIT_SAGGR

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // W__WORKSPACE_EG_SRC_DRIVER_SCHEMA_SIMPL_HXX
