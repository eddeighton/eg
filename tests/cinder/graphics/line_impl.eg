


action Line::Move
{
    dim glm::vec2 dir;

    while( true )
    {
        start( start() + dir() * clock::dt() );
        end( end() + dir() * clock::dt() );
        
        if( std::max( start().x, end().x ) > screen().x )
        {
            dir( glm::vec2( -dir().x, dir().y ) );
        }
        else if( std::min( start().x, end().x ) < 0 )
        {
            dir( glm::vec2( -dir().x, dir().y ) );
        }
        if( std::max( start().y, end().y ) > screen().y )
        {
            dir( glm::vec2( dir().x, -dir().y ) );
        }
        else if( std::min( start().y, end().y ) < 0 )
        {
            dir( glm::vec2( dir().x, -dir().y ) );
        }
        
        eg::sleep();
    }
}

action Line::Up
{
    float fTarget = start().y - Distance();
    while( start().y > fTarget )
    {
        float f = Speed() * clock::dt();
        start(  glm::vec2( start().x, start().y - f ) );
        end(    glm::vec2( end().x, end().y - f ) );
        eg::sleep();
    }
}

action Line::Down
{
    float fTarget = start().y + Distance();
    while( start().y < fTarget )
    {
        float f = Speed() * clock::dt();
        start(  glm::vec2( start().x, start().y + f ) );
        end(    glm::vec2( end().x, end().y + f ) );
        eg::sleep();
    }
}

action Line::Left
{
    float fTarget = start().x - Distance();
    while( start().x > fTarget )
    {
        float f = Speed() * clock::dt();
        start(  glm::vec2( start().x - f, start().y ) );
        end(    glm::vec2( end().x - f, end().y ) );
        eg::sleep();
    }
}

action Line::Right
{
    float fTarget = start().x + Distance();
    while( start().x < fTarget )
    {
        float f = Speed() * clock::dt();
        start(  glm::vec2( start().x + f, start().y ) );
        end(    glm::vec2( end().x + f, end().y ) );
        eg::sleep();
    }
}
