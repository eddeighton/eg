

cinder::app::getWindow()->setTitle( "Bullet Physics!" );
cinder::app::getWindow()->setSize( 800, 800 );
cinder::app::setWindowPos( 300, 100 );

resource::set< eg::TextResourceHandler >( "script.py" );

action Python[ 16 ]
{
    eg::TextResource::Ptr pText = resource::get< eg::TextResource >( "script.py" );
    try
    {
        std::cout << "Executing: script.py" << std::endl;
        pybind11::exec( pText->get(), pybind11::globals(), eg::createPythonContext( *this ) );
    }
    catch( std::exception& e )
    {
        std::cout << e.what() << std::endl;
    }
}

resource::set< eg::TextResourceHandler >( "automata.py" );

action AutomataScript[ 16 ]
{
    eg::TextResource::Ptr pText = resource::get< eg::TextResource >( "automata.py" );
    try
    {
        std::cout << "Executing: automata.py" << std::endl;
        pybind11::exec( pText->get(), pybind11::globals(), eg::createPythonContext( *this ) );
    }
    catch( std::exception& e )
    {
        std::cout << e.what() << std::endl;
    }
}

action Automata
{
    include( automata/automata.hpp );
    
    std::cout << automata::getVersion() << std::endl;
    
    dim automata::TransitionTable< automata::TOTAL_ACTIONS, 16 >::Table table;
    
    table( automata::generateGrid< 4 >() );
    /*
    action GetActions( automata::State state )
    {
        dim automata::TransitionTable< automata::TOTAL_ACTIONS, 16 >::Actions actions;
        actions
    }*/
    
    
}

include( bullet/btBulletDynamicsCommon.h );


btDefaultCollisionConfiguration* collisionSystem
    = new btDefaultCollisionConfiguration();
    
btCollisionDispatcher* collisionDispatcher
    = new btCollisionDispatcher( collisionSystem );
    
btBroadphaseInterface* broadphaseInterface
    = new btDbvtBroadphase();
    
btSequentialImpulseConstraintSolver* constraintSolver
    = new btSequentialImpulseConstraintSolver();
    
dim btDiscreteDynamicsWorld* physics;
    
btDiscreteDynamicsWorld* dynamicsWorld
    = new btDiscreteDynamicsWorld( 
        collisionDispatcher, 
        broadphaseInterface,
        constraintSolver,
        collisionSystem );
        
physics( dynamicsWorld );
        
dynamicsWorld->setGravity( btVector3( 0, -10, 0 ) );

cinder::app::setFrameRate( 120 );

cinder::gl::enableVerticalSync( false );

Camera cam = Camera.Start();

Gui gui = Gui.Start();

//main render loop
while( !Done() )
{
    cinder::gl::clear();
    cinder::gl::enableDepthRead();
    cinder::gl::enableDepthWrite();
    cinder::gl::setMatrices( perspective() );

    dynamicsWorld->stepSimulation( clock::dt(), 10 );
    
    eg::sleep();
}

delete dynamicsWorld;
delete constraintSolver;
delete broadphaseInterface;
delete collisionDispatcher;