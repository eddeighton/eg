
action Camera
{
    dim cinder::CameraPersp perspective;
    dim cinder::vec3 eye;
    
    eye( cinder::vec3( 8, 8, 2 ) );
    
    action Orbit
    {
        dim float rate;
        dim float radius;
        
        while( true )
        {
            float fAngle = clock::ct() * rate() * M_PI * 2.0f;
            cinder::vec2 v( sin( fAngle ), cos( fAngle ) );
            eye( cinder::vec3( v.x, v.y, 2 ) * radius() );
            eg::sleep();
        }
    }
    
    while( true )
    {
        perspective.Get().lookAt( eye(), cinder::vec3( 0 ) );
        eg::sleep();
    }
}

action Cube[ 9 ]
{
    dim cinder::vec3 position;
    dim cinder::vec3 size;
    
    while( true )
    {
        cinder::gl::drawColorCube( position(), size() );
        eg::sleep();
    }
}

Camera cam = Camera.Start();
Camera::Orbit orbit = cam.Orbit.Start();
orbit.rate( 0.1f );
orbit.radius( 8.0f );


dim int x;
dim int y;
x( -1 );
y( -1 );

action CreateCube
{
    Cube c = Cube.Start();
    c.size( cinder::vec3( 3, 3, 3 ) );
    c.position( cinder::vec3( x() * 4, y() * 4, 0 ) );
    
    x( x() + 1 );
    if( x() == 2 )
    {
        x( -1 );
        y( y() + 1 );
        if( y() == 2 )
            y( -1 );
    }
}

while( !Done() )
{
    cinder::gl::clear();
    cinder::gl::enableDepthRead();
    cinder::gl::enableDepthWrite();
    cinder::gl::setMatrices( perspective() );

    eg::sleep();
}