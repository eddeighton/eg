


eg::wait(); //wait for initialisation script

bool bContinue = true;
while( bContinue )
{
	cinder::gl::clear();
    
    dim std::optional< cinder::vec2 > lastPos;
    
    while( std::optional< cinder::app::InputEvent > eventOpt = Input::getEvent() )
    {
        const cinder::app::InputEvent& e = eventOpt.value();
        switch( e.type )
        {
            case cinder::app::InputEvent::eMouseDown:
                {
                    lastPos( std::optional< cinder::vec2 >( e.mouseEvent.getPos() ) );
                    if( Circle c = Circle.Start() )
                    {
                        c.Init( lastPos().value() );
                    }
                }
                break;
            case cinder::app::InputEvent::eMouseUp:
                {
                    lastPos( std::optional< cinder::vec2 >() );
                }
                break;
            case cinder::app::InputEvent::eMouseMove:
                break;
            case cinder::app::InputEvent::eMouseDrag:
                if( lastPos() )
                {
                    const cinder::vec2 mousePos( e.mouseEvent.getPos() );
                    
                    const cinder::vec2 dir = mousePos - lastPos().value();
                    dim float smoothing;
                    const float fSteps = glm::length( dir ) * smoothing();
                    for( float i = 0.0f; i < fSteps; ++i )
                    {
                        if( Circle c = Circle.Start() )
                        {
                            c.Init( lastPos().value() );
                        }
                    }
                    lastPos( std::optional< cinder::vec2 >( mousePos ) );
                    
                    //try to start a circle
                    if( Circle c = Circle.Start() )
                    {
                        c.Init( lastPos().value() );
                    }
                }
                else
                {
                    LOG( "Mouse Drag: no lastpos"  );
                }
                break;
            case cinder::app::InputEvent::eMouseWheel:
                break;
            case cinder::app::InputEvent::eKeyDown:
                break;
            case cinder::app::InputEvent::eKeyUp:
                break;
        }
    }
    
    eg::sleep();
}