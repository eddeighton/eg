
include( "glm/vec2.hpp" );
include( "glm/vec3.hpp" );

action Circle[ 128 ]
{
    dim cinder::vec2 position;
    dim cinder::Color color;
    dim float size;
    dim float starttime;
    dim float lifetime;
    dim float max_size;
    dim float max_lifetime;
    
    max_size( 80.0f );
    max_lifetime( 1.0f );
    
    size( max_size() / 2.0f );
    starttime( clock::ct() );
    lifetime( clock::ct() + max_lifetime() + rand() % 3 );
    
    //draw the circle
    while( clock::ct() < lifetime() )
    {
        cinder::gl::color( color() ); // red
        cinder::gl::drawSolidCircle( position(), size() );
        eg::sleep();
    }
    
    /*
    action ColourChanger
    {
        dim float offset;
        while( true )
        {
            color( cinder::Color( cinder::CM_HSV, fmod( clock::ct() + offset(), 1.0f ), 1, 1 ) );
            eg::sleep();
        }
    }*/
}

bool bContinue = true;
while( bContinue )
{
	cinder::gl::clear();
    
    dim std::optional< cinder::vec2 > lastPos;
    
    while( std::optional< cinder::app::InputEvent > eventOpt = Input::getEvent() )
    {
        const cinder::app::InputEvent& e = eventOpt.value();
        switch( e.type )
        {
            case cinder::app::InputEvent::eMouseDown:
                {
                    lastPos( std::optional< cinder::vec2 >( e.mouseEvent.getPos() ) );
                    if( Circle c = Circle.Start() )
                    {
                        c.position( lastPos().value() );
                        c.color( cinder::Color( cinder::CM_HSV, fmod( clock::ct(), 1.0f ), 1, 1 ) );
                    }
                }
                break;
            case cinder::app::InputEvent::eMouseUp:
                {
                    lastPos( std::optional< cinder::vec2 >() );
                }
                break;
            case cinder::app::InputEvent::eMouseMove:
                break;
            case cinder::app::InputEvent::eMouseDrag:
                if( lastPos() )
                {
                    const cinder::vec2 mousePos( e.mouseEvent.getPos() );
                    
                    const cinder::vec2 dir = mousePos - lastPos().value();
                    const float fSteps = glm::length( dir ) * 0.05f;
                    for( float i = 0.0f; i < fSteps; ++i )
                    {
                        if( Circle c = Circle.Start() )
                        {
                            c.position( lastPos().value() + ( dir * ( i / fSteps ) ) );
                            c.color( cinder::Color( cinder::CM_HSV, fmod( clock::ct(), 1.0f ), 1, 1 ) );
                        }
                    }
                    lastPos( std::optional< cinder::vec2 >( mousePos ) );
                    
                    //try to start a circle
                    if( Circle c = Circle.Start() )
                    {
                        c.position( lastPos().value() );
                        c.color( cinder::Color( cinder::CM_HSV, fmod( clock::ct(), 1.0f ), 1, 1 ) );
                    }
                }
                else
                {
                    LOG( "Mouse Drag: no lastpos"  );
                }
                break;
            case cinder::app::InputEvent::eMouseWheel:
                break;
            case cinder::app::InputEvent::eKeyDown:
                break;
            case cinder::app::InputEvent::eKeyUp:
                break;
        }
    }
    
    eg::sleep();
}