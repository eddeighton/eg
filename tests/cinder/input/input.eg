
include( "glm/vec2.hpp" );
include( "glm/vec3.hpp" );

dim float colourRate;

abstract HasColour
{
    dim cinder::Color color;
    
    action ColourChanger
    {
        dim float offset;
        while( true )
        {
            color( cinder::Color( cinder::CM_HSV, fmod( clock::ct() * colourRate() + offset(), 1.0f ), 1, 1 ) );
            eg::sleep();
        }
    }
}

abstract Lifetime
{
    dim float starttime;
    dim float lifetime;
    
    //constructor like stuff
    action initLife
    {
        starttime( clock::ct() );
    }
    //accessor like action
    action check
    {
        dim int TimeLeft;
        TimeLeft( clock::ct() < starttime() + lifetime() );
    }
}

abstract HasPosition
{
    dim cinder::vec2 position;
    dim float size;
}

action Circle[ 4096 ] : HasColour, Lifetime, HasPosition
{
    //construct like nested action
    action Init( const cinder::vec2 pos );
    
    //draw the circle
    action Draw;
    
    //main action code
    {
        initLife();
        Draw.Start();
        ColourChanger.Start();
        
        while( check().TimeLeft() )
        {
            eg::sleep();
        }
    }
    
}
