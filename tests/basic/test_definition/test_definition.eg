


object Test
{
    
    action A[ 4 ]
    {
        action C;
    }
    /*
    function foobar( int i ) : int
    {
        return i + 1;
    }*/
}

action Test::A
{
    LOG( "A" );
}

action Test::A
{
    dim int x;
}

action Test::A::B
{
    LOG( "B" );
}

link TestLink : Test;

dim int state;
state( state() + 1 );
if( state() == 1 ) 
{
    Test();
    TestLink().base( Test.Get() );
    Test.Get().A().B();
    
	return eg::sleep();
}


eg::event_iterator iter = events::getIterator();
RawEvent ev;
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "B"s );