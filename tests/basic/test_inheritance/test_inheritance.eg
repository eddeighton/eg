
action A[ 2 ]
{
    LOG( "A" );
    co_yield eg::sleep();
    
    action C[ 3 ]
    {
        LOG( "A::C" );
        co_yield eg::sleep();
        
        action F
        {
            LOG( "A::C::F" );
            co_yield eg::sleep();
        }
    }
    
    action D[ 3 ]
    {
        LOG( "A::D" );
        co_yield eg::sleep();
        
        action G
        {
            LOG( "A::D::G" );
            co_yield eg::sleep();
        }
    }
}

action B[ 2 ] : A
{
    LOG( "B" );
    co_yield eg::sleep();
    
    action C[ 3 ] : A::C
    {
        LOG( "B::C" );
        co_yield eg::sleep();
    }
    
}

action E[ 2 ] : B
{
    LOG( "E" );
    co_yield eg::sleep();
    
    action D[ 3 ] : A::D
    {
        LOG( "E::D" );
        co_yield eg::sleep();
    }
}

A a = A(); //A

a.C().F(); //A::C, A::C::F
a.D().G(); //A::D, A::D::G

A b = B(); //B

b.C().F(); //B::C, A::C::F
b.D().G(); //A::D, A::D::G

A e = E(); //E
e.C().F(); //B::C, A::C::F
e.D().G(); //E::D, A::D::G


co_yield eg::sleep();

eg::event_iterator iter = events::getIterator();
RawEvent ev;
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::C"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::C::F"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::D"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::D::G"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "B"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "B::C"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::C::F"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::D"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::D::G"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "E"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "B::C"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::C::F"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "E::D"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::D::G"s );