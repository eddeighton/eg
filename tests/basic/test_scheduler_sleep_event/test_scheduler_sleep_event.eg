

action A
{
    LOG( "sleeping1:" << clock::cycle() );
    co_yield eg::sleep();
    LOG( "sleeping2:" << clock::cycle() );
    co_yield eg::sleep();
    LOG( "done:" << clock::cycle() );
    co_yield eg::sleep();
}

co_yield eg::sleep( A() );

eg::event_iterator iter = events::getIterator();
RawEvent ev;
TEST( events::get( iter, ev ) && ( ev.type == "start"s ) );
TEST( events::get( iter, ev ) && ( ev.type == "start"s ) );
TEST( events::get( iter, ev ) && ( ev.type == "log"s ) && ( (const char*)ev.value == "sleeping1:1"s ) );
TEST( events::get( iter, ev ) && ( ev.type == "log"s ) && ( (const char*)ev.value == "sleeping2:2"s ) );
TEST( events::get( iter, ev ) && ( ev.type == "log"s ) && ( (const char*)ev.value == "done:3"s ) );
TEST( events::get( iter, ev ) && ( ev.type == "stop"s ) );