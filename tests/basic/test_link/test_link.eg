

action A[ 16 ]
{	
	action Log[ 16 ]
	{
		LOG( "A::Log" );
	}
}

action B[ 16 ] : A;
action C[ 16 ] : B;
action D[ 16 ] : A;
link Test[ 16 ] : B;

action Interaction
{
	link Left : A;
	link Right : D;
	
	action Check
	{
		A a = Left.Get();
		D d = Right.Get();
		
		if( a && d )
		{
			LOG( "Check passed" );
		}
	}
	
}

action TestIt
{
	A a = A();
	B b = B();
	C c = C();
	D d = D();

	{
		Test t = Test().base( c );
		if( C convertFromLink = t )
		{
			convertFromLink.Log();
		}
		
	}

	{
		Test t = Test();
		if( C convertFromLink = t )
		{
			convertFromLink.Log();
		}
	}

	{	
		Test t = Test().base( b );
		
		if( Test t2 = b )
		{
			LOG( "works1" );
		}
		if( Test t2 = c )
		{
			LOG( "works2" );
		}
		if( Test t2 = a )
		{
			LOG( "shouldnt" );
		}
	}
}

TestIt();

Interaction i = Interaction();
i.Left().base( C() );
i.Right().base( D() );
i.Check();

co_yield eg::sleep();

eg::event_iterator iter = events::getIterator();
RawEvent ev;
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "works1"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "works2"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "Check passed"s );
while( events::get( iter, ev ) && ( ev.type != "log"s ) );
TEST( (const char*)ev.value == "A::Log"s );
