

/*context.alpha.alpha.alpha
objects do not contain executable code themselves

*/

/*context.alpha.alpha.bravo
objects do not contain executable code themselves

*/

/*context.alpha.alpha.charlie
objects do not contain executable code themselves

*/

/*context.alpha.bravo.alpha
objects do not contain executable code themselves

*/

/*context.alpha.bravo.bravo
objects do not contain executable code themselves

*/

/*context.bravo.alpha.alpha
objects do not contain executable code themselves

*/

/*context.charlie.alpha.alpha
objects do not contain executable code themselves

*/

/*context.charlie.alpha.bravo
objects do not contain executable code themselves

*/

/*context.charlie.bravo.alpha
objects do not contain executable code themselves

*/

object SingularObject
{
    //objects do not contain executable code themselves
    //like normal object orientated languages they instead
    //should contain executable contexts
    
    function foobar() : void
    {
        //functions act like normal member functions
        LOG( "Foobar invoked. x is: " << x() );
    }

    dim int x;
}

//create a singular object and capture a reference to it
SingularObject s = SingularObject();
s.x( 123 );
s.foobar();

TEST_MSG( s, "The reference to the singular object can be implicitly converted to bool" );
TEST( s.x() == 123 );

SingularObject s2 = SingularObject();

TEST_MSG( !s2, "Attempting to allocate another object will return null" );
TEST_MSG( s != s2, "The reference in the case is the same address but the reference itself is not valid and thus not equal" );

//When allocation errors occur no exception is thrown but the error log will contain an error message

//invoking a function call on the invalid reference will actually work preventing a crash
//it will use the zero based address within the bounded memory model preventing any segmentation fault.
s2.foobar();
TEST( s2.x() == 123 );

/*context.allocation.singular.advanced
This section contains more advanced stuff....

SubTitle
^^^^^^^^
Always note how something is something

=====  =====  =======
A      B      A and B
=====  =====  =======
False  False  False
True   False  False
False  True   False
True   True   True
=====  =====  =======

*/

//more code and stuff
function SingularObject::foobar2()
{
    //functions act like normal member functions
    LOG( "Foobar invoked. x is: " << x() );
}
