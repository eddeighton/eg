

/*basic
A context can inherit from any other context.  Inheritance means the deriving context inherits all features of the underlying type and can then override and extend them
*/

action A
{
    dim int x;
    
    function test() : void 
    {
        LOG( "A::test" );
    }
}

action B : A
{
    dim int y;
    
    function test() : void 
    {
        LOG( "B::test" );
    }
}

/*continued
A context will inherit the underlying domain size of the derived type but can override it
*/

/*continued.detail
A context will inherit the underlying domain size of the derived type but can override it
*/
action C[ 4 ]
{
    dim int x;
    
    function test() : void 
    {
        LOG( "C::test" );
    }
}

action D : C
{
    //has domain size of four
    function test() : void 
    {
        LOG( "D::test" );
    }
};

action E[ 5 ] : C
{
    //has domain size of five
    function test() : void 
    {
        LOG( "E::test" );
    }
};

std::vector< Var< A, B, C, D, E > > actions = { A(), B(), C(), D(), E() };

for( auto v : actions )
    v.test();

