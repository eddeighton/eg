
abstract Base
{
    dim int x;
}

action D[ 16 ] : Base
{
}

action A[ 16 ]
{
    action B[ 16 ] : Base
    {
        action C[ 16 ] : Base
        {
        }
    }
}

for( int i = 0; i < 10; ++i )
{
    A a = A();
    for( int j = 0; j < 10; ++j )
    {
        A::B b = a.B();
        for( int k = 0; k < 10; ++k )
        {
            A::B::C c = b.C();
        }
    }

}

SLEEP;

//Base.Range actually only means root.D.Range - because D is a child of root it hides the other Bases
const std::size_t szBases = eg::count( Base.Range() );
TEST_MSG( szBases == 0, "Total bases should be 0: " << szBases );

//A.Base.Range is the frontier of Base deriving types visible in the subtree of A i.e. B
const std::size_t szABases = eg::count( A.Base.Range() );
TEST_MSG( szABases == 100, "Total bases should be 100: " << szABases );

//B.Base.Range similary is the frontier of Base deriving types visible in the subtree of B i.e. the C
const std::size_t szBBases = eg::count( B.Base.Range() );
TEST_MSG( szBBases == 1000, "Total bases should be 1000: " << szBBases );

const std::size_t szC = eg::count( C.Range() );
TEST_MSG( szC == 1000, "Total bases should be 1000: " << szC );

SLEEP;
