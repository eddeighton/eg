

abstract A
{
}

action B[ 4 ] : A
{
    action Counter
    {
        dim int x;
        while( true )
        {
            x( x() + 1 );
            eg::sleep();
        }
    }
    while( !Done() )
        eg::sleep();
}

action D[ 4 ] : A
{
    action Counter
    {
        dim int x;
        while( true )
        {
            x( x() + 2 );
            eg::sleep();
        }
    }
    while( !Done() )
        eg::sleep();
}

action C[ 4 ]
{
    dim A a1;
    dim A a2;
    
    while( true )
        eg::sleep();
}

C c = C.Start();
{
    c.a1( B.Start() );
    Var< B::Counter, D::Counter > v = c.a1.Counter.Start();
    TEST( v );
}
{
    c.a2( D.Start() );
    c.a2.Counter.Start();
}

TEST_MSG( c.a1.x() == 0, "Counter x should be 0: " << c.a1.x() );
TEST_MSG( c.a2.x() == 0, "Counter x should be 0: " << c.a2.x() );

eg::wait();

TEST_MSG( c.a1.x() == 1, "Counter x should be 1: " << c.a1.x() );
TEST_MSG( c.a2.x() == 2, "Counter x should be 2: " << c.a2.x() );

eg::sleep();

TEST_MSG( c.a1.x() == 2, "Counter x should be 2: " << c.a1.x() );
TEST_MSG( c.a2.x() == 4, "Counter x should be 4: " << c.a2.x() );

Stop();

eg::wait();