
include( <iostream> );

include( test_generic.hpp );

dim float x;

action Thing[ 64 ]
{
    std::cout << "Thing" << std::endl;
    dim float y;
    export void Y( float f ) { y( f ); }
    export float Y() { return y(); }
    
    export void Go() { Start(); }
}

export const float&     X()          { return x(); }
export void             X( float f ) { x( f ); }

export auto Things() { return Thing.Raw(); }

x( 123 );

generic::testInvoke( root.Get() );
generic::printThings( root.Get() );

std::cout << calculate( 123, 321 ) << std::endl;

export int calculate( int x, int y )
{
	Thing.Start();
	return x * y + x * X();
}

dim generic::GenericThing< Thing > genericThing;

genericThing.Get().data.push_back( *Thing.Raw().begin() );

genericThing.Get().DoStuff();
