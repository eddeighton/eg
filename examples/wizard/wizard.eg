

include( "schema/wizardxml/wizard_schema.hxx" );
include( "schema/wizardxml/wizard_schema-pimpl.hxx" );
include( "schema/wizardxml/wizard_schema-simpl.hxx" );

include( "schema/egxml/eg_schema.hxx" );
include( "schema/egxml/eg_schema-pimpl.hxx" );
include( "schema/egxml/eg_schema-simpl.hxx" );

include( "schema/project.hpp" );

ShowWindow( GetConsoleWindow(), SW_HIDE );

include( "examples.hpp" );

dim Environment environment;
dim std::vector< std::shared_ptr< Example > > examples;

//attempt to load the wizard config 
action LoadWizardXML
{
    examples.Get().clear();
    
    //load the wizard config file
    std::unique_ptr< wizardxml::Wizard > pDoc;
    {
        boost::system::error_code errorCode;
        boost::filesystem::path expectedWizardConfig = 
            boost::dll::program_location( errorCode ).parent_path() / "../../wizard.xml";
            
        if( errorCode )
        {
            ERR( "Could not locate wizard.xml error code " << errorCode );
            root.Stop();
            eg::sleep();
        }
            
        //attempt to load the wizard config file from the eg installation
        if( !boost::filesystem::exists( expectedWizardConfig ) )
        {
            ERR( "Could not locate wizard.xml at " << expectedWizardConfig.generic_string() );
            root.Stop();
            eg::sleep();
        }
            
        try
        {
            wizardxml::Wizard_paggr wizard_p;
            xml_schema::document_pimpl wizardDocument( wizard_p.root_parser(), wizard_p.root_name() );
            wizard_p.pre();
            wizardDocument.parse( expectedWizardConfig.string() );
            pDoc = std::unique_ptr< wizardxml::Wizard >( wizard_p.post() );
        }
        catch( const xml_schema::parser_exception& e )
        {
            ERR( "XML error opening: " << expectedWizardConfig.generic_string() << " " << e.line() << ":" << e.column() << ": " << e.text() );
            root.Stop();
            eg::sleep();
        }
    }
        
    //load each project 
    for( const std::string& strProject : pDoc->Project() )
    {
        boost::filesystem::path projectDirectory;
        
        try
        {
            projectDirectory = boost::filesystem::absolute( environment().expand( strProject ) );
        }
        catch( std::exception& e )
        {
            ERR( "Failed to expand string: " << strProject << ". " << e.what() );
            root.Stop();
            eg::sleep();
        }
        
        if( !boost::filesystem::exists( projectDirectory ) )
        {
            ERR( "Could not locate project at " << projectDirectory.generic_string() );
            root.Stop();
            eg::sleep();
        }
        
        std::cout << "Found project: " << projectDirectory.generic_string() << std::endl;
        const boost::filesystem::path projectFile = projectDirectory / Environment::EG_FILE_EXTENSION;
        if( !boost::filesystem::exists( projectFile ) )
        {
            ERR( "Could not locate project at " << projectFile.generic_string() );
            root.Stop();
            eg::sleep();
        }
        
        try
        {
            egxml::EG_paggr eg_p;
            xml_schema::document_pimpl egDocument( eg_p.root_parser(), eg_p.root_name() );
            eg_p.pre();
            egDocument.parse( projectFile.string() );
            std::shared_ptr< egxml::EG > pXML( eg_p.post() );
            examples.Get().push_back( std::make_shared< Example >( pXML, projectDirectory ) );
        }
        catch( const xml_schema::parser_exception& e )
        {
            ERR( "XML error opening: " << projectFile.generic_string() << " " << e.line() << ":" << e.column() << ": " << e.text() );
            root.Stop();
            eg::sleep();
        }
         
    }
}

//load at startup
LoadWizardXML();

action BuildProject( std::shared_ptr< Example > pExample, int bFullRebuild )
{
    std::ostringstream osCmd;
    environment().startDriverCommand( osCmd );
    
    osCmd << "--build --bench --dir " << pExample->dir.generic_string();
    if( bFullRebuild )
    {
        osCmd << " --full";
    }
    
    LOG( "Executing command: " << osCmd.str() );
    
    bool bShowProgress = true;
    
    std::ostringstream osBuildOutput;
    {
        std::string strLine;
        boost::process::ipstream isBuildOutput;
        boost::process::child buildProcess( osCmd.str(), 
            ( boost::process::std_out & boost::process::std_err ) > isBuildOutput );
        
        while( buildProcess.running() || std::getline( isBuildOutput, strLine ) )
        { 
            if( !strLine.empty() )
            {
                osBuildOutput << strLine << "\n";
            }
                
            ImGui::Begin( "Build", &bShowProgress, ImGuiWindowFlags_NoCollapse );
        
            std::ostringstream os;
            os << "Building project: " << pExample->project.getProject().Name();
            ImGui::Text( "%s", os.str().c_str() );
            
            ImGui::Text( "%s", osBuildOutput.str().c_str() );
            
            ImGui::End();
            
            eg::sleep();
        }
        
        buildProcess.wait();
        int result = buildProcess.exit_code();
        LOG( "Result: " << result );
    }
    
    while( bShowProgress )
    {
        if( ImGui::Begin( "Build", &bShowProgress, ImGuiWindowFlags_NoCollapse ) )
        {
            std::ostringstream os;
            os << "Build Completed: " << pExample->project.getProject().Name();
            ImGui::Text( "%s", os.str().c_str() );
        
            ImGui::Text( "%s", osBuildOutput.str().c_str() );
            
            ImGui::End();
            
            eg::sleep();
        }
        else
        {
            break;
        }
    }
}

action RunProject( std::shared_ptr< Example > pExample )
{
    //always build first - can just call syncronously
    //BuildProject( pExample );
    
    std::ostringstream osCmd;
    environment().startDriverCommand( osCmd );
    
    osCmd << "--run --dir " << pExample->dir.generic_string();
    
    LOG( "Executing command: " << osCmd.str() );
    bool bShowExecution = true;
    
    std::ostringstream osProgramOutput;
    {
        std::string strLine;
        boost::process::ipstream isExecutionOutput;
        boost::process::child egProgramProcess( osCmd.str(), 
            ( boost::process::std_out & boost::process::std_err ) > isExecutionOutput );

        while( egProgramProcess.running() || std::getline( isExecutionOutput, strLine ) )
        { 
            if( !strLine.empty() )
            {
                osProgramOutput << strLine << "\n";
            }
                
            ImGui::Begin( "Execution", &bShowExecution, ImGuiWindowFlags_NoCollapse );
        
            std::ostringstream os;
            os << "Executing project: " << pExample->project.getProject().Name();
            ImGui::Text( "%s", os.str().c_str() );
            
            ImGui::Text( "%s", osProgramOutput.str().c_str() );
            
            ImGui::End();
        
            eg::sleep();
        }
        
        egProgramProcess.wait();
        int result = egProgramProcess.exit_code();
        LOG( "Result: " << result );
    }
    
    while( bShowExecution )
    {
        if( ImGui::Begin( "Execution", &bShowExecution, ImGuiWindowFlags_NoCollapse ) )
        {
            std::ostringstream os;
            os << "Run Completed: " << pExample->project.getProject().Name();
            ImGui::Text( "%s", os.str().c_str() );
        
            ImGui::Text( "%s", osProgramOutput.str().c_str() );
            
            ImGui::End();
            
            eg::sleep();
        }
        else
        {
            break;
        }
    }
}

bool bContinue = true;
bool bShowBrowser = true;
bool bShowCreate = false;

while( bContinue )
{
    //need to sleep atleast once before we start using imgui
    eg::sleep();
    
    if( ImGui::BeginMainMenuBar() )
    {
        if( ImGui::BeginMenu( "Wizard" ) )
        {
            /*if( ImGui::MenuItem( "New" ) )
            {
                bShowCreate = true;
            }*/
            if( ImGui::MenuItem( "Browse Examples" ) )
            {
                bShowBrowser = true;
            }
            if( ImGui::MenuItem( "Quit" ) )
            {
                bContinue = false;
            }
            
            ImGui::EndMenu();
        }
        ImGui::EndMainMenuBar();
    }

    if( bShowBrowser )
    {
        ImGui::Begin( "Project Browser", &bShowBrowser );
        
        if( ImGui::TreeNode( "Projects" ) )
        {
            int iUnique = 0;
            for( std::vector< std::shared_ptr< Example > >::iterator 
                i = examples.Get().begin(),
                iEnd = examples.Get().end(); i!=iEnd; ++i, ++iUnique )
            {
                std::shared_ptr< Example > pExample = *i;
                
                std::ostringstream os;
                os << pExample->project.getProject().Name();
                
                if( ImGui::TreeNode( (void*)(intptr_t)iUnique, "%s", os.str().c_str() ) )
                {
                    ImGui::Indent();
                    ImGui::Text( "Description: " );
                    ImGui::SameLine();
                    std::string str = pExample->project.getProject().Description();
                    ImGui::Text( "%s", str.c_str() );
                    
                    if( ImGui::Button( "View Code" ) )
                    {
                        
                    }
                    ImGui::SameLine();
                    if( ImGui::Button( " Build " ) )
                    {
                        BuildProject.Start( pExample, false );
                    }
                    ImGui::SameLine();
                    if( ImGui::Button( "Full Build" ) )
                    {
                        BuildProject.Start( pExample, true );
                    }
                    ImGui::SameLine();
                    if( ImGui::Button( "  Run  " ) )
                    {
                        RunProject.Start( pExample );
                    }
                    
                    ImGui::Unindent();
                    ImGui::TreePop();
                }
            }
            
            ImGui::TreePop();
        }
        
        ImGui::End();
    }
/*
    if( bShowCreate )
    {
        ImGui::Begin( "Project Wizard", &bShowCreate );
        
        ImGui::End();
    }*/


    
    
    cinder::gl::clear();
}
